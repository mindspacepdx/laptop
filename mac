#!/usr/bin/env bash

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  printf "\n%b\n" "$1"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="$2"

  if [[ -w "$HOME/.zshrc.local" ]]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if (( skip_new_line )); then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi

if [[ ! -f "$HOME/.zshrc" ]]; then
  touch "$HOME/.zshrc"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

if [[ "$SHELL" != */zsh ]]; then
  fancy_echo "Changing your shell to zsh ..."
    chsh -s $(which zsh)
fi

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      brew upgrade "$@"
    fi
  else
    brew install "$@"
  fi
}

brew_is_installed() {
  local name="$(brew_expand_alias "$1")"

  brew list -1 | grep -Fqx "$name"
}

brew_is_upgradable() {
  local name="$(brew_expand_alias "$1")"

  brew outdated --quiet "$name" >/dev/null
  [[ $? -ne 0 ]]
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local name="$(brew_expand_alias "$1")"
  local domain="homebrew.mxcl.$name"
  local plist="$domain.plist"

  mkdir -p "$HOME/Library/LaunchAgents"
  ln -sfv "/usr/local/opt/$name/$plist" "$HOME/Library/LaunchAgents"

  if launchctl list | grep -q "$domain"; then
    launchctl unload "$HOME/Library/LaunchAgents/$plist" >/dev/null
  fi
  launchctl load "$HOME/Library/LaunchAgents/$plist" >/dev/null
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew, a good OS X package manager ..."
    ruby <(curl -fsS https://raw.githubusercontent.com/Homebrew/install/master/install)

    append_to_zshrc '# recommended by brew doctor'
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1
    export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update

if ! command -v git >/dev/null; then
fancy_echo "Installing Git, the only version control system ..."
  brew_install_or_upgrade 'git'
else
  fancy_echo "Git already installed. Skipping ..."
fi

fancy_echo "Installing Redis, a good key-value database ..."
  brew_install_or_upgrade 'redis'

fancy_echo "Installing The Silver Searcher (better than ack or grep) to search the contents of files ..."
  brew_install_or_upgrade 'the_silver_searcher'

fancy_echo "Installing vim from Homebrew to get the latest version ..."
  brew_install_or_upgrade 'vim'
  
fancy_echo "Installing mongodb ..."
  brew_install_or_upgrade 'mongodb'
  ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents
  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist

fancy_echo "Installing ctags, to index files for vim tab completion of methods, classes, variables ..."
  brew_install_or_upgrade 'ctags'

fancy_echo "Installing ImageMagick, to crop and resize images ..."
  brew_install_or_upgrade 'imagemagick'

fancy_echo "Installing QT, used by Capybara Webkit for headless Javascript integration testing ..."
  brew_install_or_upgrade 'qt'

fancy_echo "Installing watch, to execute a program periodically and show the output ..."
  brew_install_or_upgrade 'watch'

fancy_echo "Installing GitHub CLI client ..."
  brew_install_or_upgrade 'gh'

if [[ ! -d "$HOME/.rbenv" ]]; then
  fancy_echo "Installing rbenv, to change Ruby versions ..."
    brew_install_or_upgrade 'rbenv'

    append_to_zshrc 'export PATH="$HOME/.rbenv/bin:$PATH"'
    append_to_zshrc 'eval "$(rbenv init - zsh --no-rehash)"' 1
fi

ruby_build_path="$HOME/.rbenv/plugins/ruby-build"

fancy_echo "Installing ruby-build..."
  brew_install_or_upgrade 'ruby-build'

fancy_echo "Upgrading and linking OpenSSL ..."
  brew_install_or_upgrade 'openssl'
  brew unlink openssl && brew link openssl --force

ruby_version="2.1.2"

export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init - zsh)"

fancy_echo "Rehash rbenv"
  rbenv rehash

fancy_echo "Installing Ruby $ruby_version ..."
  rbenv install -s "$ruby_version"

fancy_echo "Setting $ruby_version as global default Ruby ..."
  rbenv global "$ruby_version"
  rbenv local "$ruby_version"

fancy_echo "Updating to latest Rubygems version ..."
  gem update --system
  
fancy_echo "Installing Jekyll ..."
  gem install jekyll

fancy_echo "Installing Bundler to install project-specific Ruby gems ..."
  gem install bundler --no-document
  rbenv rehash
  
if ! command -v sass >/dev/null; then
  fancy_echo "Installing Sass, a css compiler ..."
    gem install sass
fi

fancy_echo "Configuring Bundler for faster, parallel gem installation ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Installing foreman ..."
  gem install foreman
  
fancy_echo "Installing Grunt CLI ..."
  npm install -g grunt-cli

if ! command -v rcup >/dev/null; then
  fancy_echo "Installing rcm, to manage your dotfiles ..."
    brew tap thoughtbot/formulae
    brew_install_or_upgrade 'rcm'
else
  fancy_echo "rcm already installed. Skipping ..."
fi

fancy_echo "Adjusting Mac settings (logout to take shape) ..."
  defaults write NSGlobalDomain KeyRepeat -int 1

fancy_echo "Installing your personal additions from ~/.laptop.local ..."
  if [[ -f ~/.laptop.local ]]; then
    source ~/.laptop.local
  fi
